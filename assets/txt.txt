<?php

use App\Http\Controllers\Api\V1\LoginController;
use App\Http\Controllers\Api\V1\LogoutController;
use App\Http\Controllers\Api\V1\PostController;
use App\Http\Controllers\Api\V1\RegisterController;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

Route::get('/user', function (Request $request) {
    return $request->user();
})->middleware('auth:sanctum');


Route::get('/test',function (Request $request){
    return response()->json([
        'message'=>'It is working'
    ]);
});

Route::post('register',[RegisterController::class,'store']);
Route::post('login',[LoginController::class,'store']);


Route::get('posts',[PostController::class,'index'])->middleware('auth:sanctum');
Route::post('posts',[PostController::class,'store'])->middleware('auth:sanctum');
Route::get('posts/{id}',[PostController::class,'show'])->middleware('auth:sanctum');
Route::delete('posts/{id}',[PostController::class,'destroy'])->middleware('auth:sanctum');
Route::put('posts/{id}',[PostController::class,'update'])->middleware('auth:sanctum');

Route::post('/logout',[LogoutController::class,'logout'])->middleware('auth:sanctum');





<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class LoginController extends Controller
{

    public function store(Request $request) {

        $request->validate([
            'email' => ['required', 'string' , 'email'],
            'password' => ['required','string']
        ]);

        if(!Auth::attempt($request->only('email','password'))){
            return response()->json([
                'message' => 'Bad Credential'
            ],401);


        }

        $user = Auth::user();
        $token = $user->createToken('auth_token')->plainTextToken;

        return response()->json([
            'message' => 'Logged in successfully',
            'token'=>$token,
            'user' => $user
        ]);
    }
}





<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\Request;
use Illuminate\Validation\Rules;

class RegisterController extends Controller
{
    //
    public function store(Request $request) {

        $request->validate([
            'name'=>['required','string','max:255'],
            'email'=>['required','string','email','max:255','unique:users,email'],
            'password'=>['required','confirmed',Rules\Password::defaults()],
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => $request->password,
        ]);

        event(new Registered($user));

        $token = $user->createToken('auth_token')->plainTextToken;

        return response()->json([
            'message' => 'User registered successfully',
            'token' => $token,
            'user' => $user
        ]);

    }
}





<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;


class LogoutController extends Controller
{
    public function logout(Request $request) {
        $request->user()->currentAccessToken()->delete();
        // $request->user()->tokens()->delete();

        return response()->json([
            'message'=>'User revoked successfully'
        ], 200);
    }
}





<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Controller;
use App\Models\Post;
use Illuminate\Http\Request;

class PostController extends Controller
{

    public function index(){
        $posts = Post::all();

        return response()->json([
            'posts' => $posts
        ]);
    }

    public function store(Request $request) {
        $request->validate([
            'title' => ['required', 'string', 'max:100'],
            'body' => ['required' , 'string' , 'max:500']
        ]);

        $post = Post::create([
            'title' => $request->title,
            'body' => $request->body
        ]);

        return response()->json([
            'message' => 'Post created successfully',
            'post' => $post
        ]);

    }

    public function show(string $id) {
        $post = Post::find($id);

        if(!$post) {
            return response()->json([
                'message' => 'No post found'
            ]);
        }

        return response()->json([
            'post'=>$post
        ]);
    }

    public function update(Request $request, string $id) {
        $request->validate([
            'title' => ['required', 'string', 'max:100'],
            'body' => ['required' , 'string' , 'max:500']
        ]);

        $post = Post::find($id);

        $post = $post->update([
            'title' => $request->title,
            'body' => $request->body
        ]);

        return response()->json([
            'post'=>$post,
            'message'=>'Post Updated successfully'
        ]);
    }


    public function destroy(string $id){
        $post = Post::findOrFail($id);

        $post->delete();

        return response()->json([
            'message' => 'Post Deleted successfully'
        ]);
    }
}
